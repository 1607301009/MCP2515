C51 COMPILER V9.60.0.0   MCP2515                                                           09/18/2021 02:15:25 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MCP2515
OBJECT MODULE PLACED IN .\Objects\MCP2515.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE MCP2515.c COMPACT OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Li
                    -stings\MCP2515.lst) TABS(2) OBJECT(.\Objects\MCP2515.obj)

line level    source

   1          /**********************************************************************************
   2           * 文件名  ：MCP2515.c
   3           * 描述    ：MCP2515驱动函数库         
   4           * 实验平台：NiRen_STC/IAP15核心板(或用户STC15单片机开发板) + NiRen_MCP2515 CAN模块    
   5          **********************************************************************************/
   6          
   7          #include <reg51.h>
   8          #include "MCP2515.H"
   9          
  10          //MCP2515引脚定义
  11          sbit MCP2515_INT  = P1^6;//MCP2515中断引脚    （好像没有用到）
  12          
  13          sbit MCP2515_SCK  = P1^5;//SPI时钟引脚 
  14          sbit MCP2515_MOSI = P1^4;//SPI主机输出从机输入引脚 
  15          sbit MCP2515_MISO = P1^3;//SPI主机输入从机输出引脚 
  16          sbit MCP2515_CS   = P1^2;//SPI片选引脚
  17          
  18          uint8 code TXB0_Address[]={TXB0CTRL,TXB0SIDH,TXB0SIDL,TXB0EID8,TXB0EID0,TXB0DLC,TXB0D0,TXB0D1,TXB0D2,TXB0D
             -3,TXB0D4,TXB0D5,TXB0D6,TXB0D7};
  19          uint8 code TXB1_Address[]={TXB1CTRL,TXB1SIDH,TXB1SIDL,TXB1EID8,TXB1EID0,TXB1DLC,TXB1D0,TXB1D1,TXB1D2,TXB1D
             -3,TXB1D4,TXB1D5,TXB1D6,TXB1D7};
  20          uint8 code TXB2_Address[]={TXB2CTRL,TXB2SIDH,TXB2SIDL,TXB2EID8,TXB2EID0,TXB2DLC,TXB2D0,TXB2D1,TXB2D2,TXB2D
             -3,TXB2D4,TXB2D5,TXB2D6,TXB2D7};
  21           
  22          uint8 code RXF0_Address[]={RXF0SIDH,RXF0SIDL,RXF0EID8,RXF0EID0};
  23          uint8 code RXF1_Address[]={RXF1SIDH,RXF1SIDL,RXF1EID8,RXF1EID0};
  24          uint8 code RXF2_Address[]={RXF2SIDH,RXF2SIDL,RXF2EID8,RXF2EID0};
  25          uint8 code RXF3_Address[]={RXF3SIDH,RXF3SIDL,RXF3EID8,RXF3EID0};
  26          uint8 code RXF4_Address[]={RXF4SIDH,RXF4SIDL,RXF4EID8,RXF4EID0};
  27          uint8 code RXF5_Address[]={RXF5SIDH,RXF5SIDL,RXF5EID8,RXF5EID0};
  28          
  29          uint8 code RXM0_Address[]={RXM0SIDH,RXM0SIDL,RXM0EID8,RXM0EID0};
  30          uint8 code RXM1_Address[]={RXM1SIDH,RXM1SIDL,RXM1EID8,RXM1EID0};
  31          
  32          /*******************************************************************************
  33          * 函数名  : Delay_Nms
  34          * 描述    : 通过软件延时约nms(不准确)
  35          * 输入    : x
  36          * 说明    : 此方式延时时间是不准确的,准确延时建议用定时器
  37          *******************************************************************************/
  38          void Delay_Nms(uint16 x)
  39          {
  40   1        uint16 y;
  41   1      
  42   1        for (;x>0;x--)
  43   1          for (y=0;y<100;y++);
  44   1      }
  45          
  46          
  47          /*******************************************************************************
  48          * 函数名  : SPI_ReadByte
  49          * 描述    : 通过SPI读取一个字节数据
  50          * 输入    : 无
  51          * 输出    : 无
C51 COMPILER V9.60.0.0   MCP2515                                                           09/18/2021 02:15:25 PAGE 2   

  52          * 返回值  : rByte(读取到的一个字节数据)
  53          * 说明    : 无
  54          *******************************************************************************/
  55          uint8 SPI_ReadByte(void)
  56          {
  57   1        uint8 i,rByte=0;
  58   1        
  59   1        MCP2515_SCK=0;
  60   1        for(i=0;i<8;i++)
  61   1        {
  62   2          MCP2515_SCK=1;
  63   2          rByte<<=1;
  64   2          rByte|=MCP2515_MISO;
  65   2          MCP2515_SCK=0;  
  66   2        }
  67   1        return rByte;
  68   1      }
  69          
  70          /*******************************************************************************
  71          * 函数名  : SPI_SendByte
  72          * 描述    : SPI发送一个字节数据
  73          * 输入    : dt:待发送的数据
  74          * 输出    : 无
  75          * 返回值  : 无
  76          * 说明    : 无
  77          *******************************************************************************/
  78          void SPI_SendByte(uint8 dt)
  79          {
  80   1        uint8 i;
  81   1          
  82   1        for(i=0;i<8;i++)
  83   1        { 
  84   2          MCP2515_SCK=0;
  85   2          if((dt<<i)&0x80)
  86   2            MCP2515_MOSI=1;
  87   2          else
  88   2            MCP2515_MOSI=0;         
  89   2          MCP2515_SCK=1;
  90   2        }
  91   1        MCP2515_SCK=0;
  92   1      }
  93          
  94          /*******************************************************************************
  95          * 函数名  : MCP2515_WriteByte
  96          * 描述    : 通过SPI向MCP2515指定地址寄存器写1个字节数据
  97          * 输入    : addr:MCP2515寄存器地址,dat:待写入的数据
  98          * 输出    : 无
  99          * 返回值  : 无
 100          * 说明    : 无
 101          *******************************************************************************/
 102          void MCP2515_WriteByte(uint8 addr,uint8 dat)
 103          {
 104   1        MCP2515_CS=0;       //置MCP2515的CS为低电平
 105   1        SPI_SendByte(CAN_WRITE);  //发送写命令
 106   1        SPI_SendByte(addr);     //发送地址
 107   1        SPI_SendByte(dat);      //写入数据
 108   1        MCP2515_CS=1;       //置MCP2515的CS为高电平 
 109   1      }
 110          
 111          /*******************************************************************************
 112          * 函数名  : MCP2515_ReadByte
 113          * 描述    : 通过SPI从MCP2515指定地址寄器读1个字节数据
C51 COMPILER V9.60.0.0   MCP2515                                                           09/18/2021 02:15:25 PAGE 3   

 114          * 输入    : addr:MCP2515寄存器地址
 115          * 输出    : 无
 116          * 返回值  : rByte:读取到寄存器的1个字节数据
 117          * 说明    : 无
 118          *******************************************************************************/
 119          uint8 MCP2515_ReadByte(uint8 addr)
 120          {
 121   1        uint8 rByte;
 122   1        
 123   1        MCP2515_CS=0;       //置MCP2515的CS为低电平
 124   1        SPI_SendByte(CAN_READ);   //发送读命令
 125   1        SPI_SendByte(addr);     //发送地址
 126   1        rByte=SPI_ReadByte();   //读取数据
 127   1        MCP2515_CS=1;       //置MCP2515的CS为高电平
 128   1        return rByte;       //返回读到的一个字节数据
 129   1      }
 130          
 131          /*******************************************************************************
 132          * 函数名  : MCP2515_Reset
 133          * 描述    : 发送复位指令软件复位MCP2515
 134          * 输入    : 无
 135          * 输出    : 无
 136          * 返回值  : 无
 137          * 说明    : 将内部寄存器复位为缺省状态,并将器件设定为配置模式
 138          *******************************************************************************/
 139          void MCP2515_Reset(void)
 140          {
 141   1        MCP2515_CS=0;       //置MCP2515的CS为低电平
 142   1        SPI_SendByte(CAN_RESET);  //发送寄存器复位命令
 143   1        MCP2515_CS=1;       //置MCP2515的CS为高电平
 144   1      }
 145          
 146          /*******************************************************************************
 147          * 函数名  : CAN_Set_RX
 148          * 描述    : 在配置模式下设置屏蔽器RXM和过滤器RXF
 149          * 输入    : *CAN_TX_Buf(待发送数据缓冲区指针),len(待发送数据长度)
 150          * 输出    : 无
 151          * 返回值  : 无
 152          * 说明    : 当ID>0x7FF设置设置为拓展帧
 153          *******************************************************************************/
 154          void CAN_Set_RX(uint8 RXF_Address,uint32 ID,uint8 EXIDE)
 155          {
 156   1        //EXIDE=1、ID>0x7FF发送拓展帧
 157   1        if (ID<=0x7FF)
 158   1        {
 159   2          if (EXIDE)
 160   2          {
 161   3            MCP2515_WriteByte(RXF_Address+0,0x0);                 //SIDH
 162   3            MCP2515_WriteByte(RXF_Address+1,0x8);                 //SIDL
 163   3            MCP2515_WriteByte(RXF_Address+2,ID>>8&0xFF);              //EID8
 164   3            MCP2515_WriteByte(RXF_Address+3,ID&0xFF);               //EID0
 165   3          }                                   
 166   2          else
 167   2          { 
 168   3            MCP2515_WriteByte(RXF_Address+0,ID>>3);               //SIDH
 169   3            MCP2515_WriteByte(RXF_Address+1,(ID&0x07)<<5);            //SIDL
 170   3            MCP2515_WriteByte(RXF_Address+2,0);                 //EID8
 171   3            MCP2515_WriteByte(RXF_Address+3,0);                 //EID0
 172   3          }
 173   2        }
 174   1        else
 175   1        { 
C51 COMPILER V9.60.0.0   MCP2515                                                           09/18/2021 02:15:25 PAGE 4   

 176   2          MCP2515_WriteByte(RXF_Address+0,ID>>21);                  //SIDH
 177   2          MCP2515_WriteByte(RXF_Address+1,(ID>>18&0x07)<<5|(ID>>16&0x03)|0x08);   //SIDL
 178   2          MCP2515_WriteByte(RXF_Address+2,ID>>8&0xFF);                //EID8
 179   2          MCP2515_WriteByte(RXF_Address+3,ID&0xFF);                 //EID0
 180   2        }
 181   1      }
 182          
 183          
 184          /*******************************************************************************
 185          * 函数名  : MCP2515_Init
 186          * 描述    : MCP2515初始化配置
 187          * 输入    : 无
 188          * 输出    : 无
 189          * 返回值  : 无
 190          * 说明    : 初始化包括：软件复位、工作波特率设置、标识符相关配置等。
 191          *******************************************************************************/
 192          void MCP2515_Init(uint8 *CAN_Bitrate)
 193          {
 194   1        uint8 temp=0;
 195   1      
 196   1        MCP2515_Reset();  //发送复位指令软件复位MCP2515
 197   1        Delay_Nms(1);   //通过软件延时约nms(不准确)
 198   1      
 199   1        //设置波特率
 200   1        //set CNF1,SJW=00,长度为1TQ,BRP=49,TQ=[2*(BRP+1)]/Fsoc=2*50/8M=12.5us
 201   1        MCP2515_WriteByte(CNF1,CAN_Bitrate[4]|CAN_Bitrate[0]);
 202   1        //set CNF2,SAM=0,在采样点对总线进行一次采样，PHSEG1=(2+1)TQ=3TQ,PRSEG=(0+1)TQ=1TQ
 203   1        MCP2515_WriteByte(CNF2,BTLMODE_CNF3|CAN_Bitrate[2]|CAN_Bitrate[1]);
 204   1        //set CNF3,PHSEG2=(2+1)TQ=3TQ,同时当CANCTRL.CLKEN=1时设定CLKOUT引脚为时间输出使能位
 205   1        MCP2515_WriteByte(CNF3,SOF_ENABLED|CAN_Bitrate[3]);
 206   1      
 207   1        MCP2515_WriteByte(RXB0CTRL,0x06);//如果RXB0满,RXB0 接收到的报文将被滚存至RXB1
 208   1      
 209   1        //uint8 RXF_Address,uint32 ID,uint8 EXIDE)
 210   1        //RXB0 接收缓冲器配备有验收滤波寄存器RXF0 和RXF1（以及过滤屏蔽寄存器RXM0）
 211   1        CAN_Set_RX(RXF0SIDH,0x100,1);
 212   1        CAN_Set_RX(RXF1SIDH,0x7FE,0);
 213   1      
 214   1        CAN_Set_RX(RXM0SIDH,0x7FF,0);
 215   1      
 216   1        //RXB1 配备有验收滤波寄存器RXF2、RXF3、RXF4、RXF5和滤波屏蔽寄存器RXM1。
 217   1        CAN_Set_RX(RXF2SIDH,0x800,1);
 218   1        CAN_Set_RX(RXF3SIDH,0x1FFFFFFF,1);
 219   1        CAN_Set_RX(RXF4SIDH,0x7FF,0);
 220   1        CAN_Set_RX(RXF5SIDH,0x0,0);
 221   1        
 222   1        CAN_Set_RX(RXM1SIDH,0x1FFFFFFE,0);
 223   1      
 224   1      //  MCP2515_WriteByte(TXB0SIDH,0xAB);//发送缓冲器0标准标识符高位
 225   1      //  MCP2515_WriteByte(TXB0SIDL,0xE0);//|0x08|0x2);//发送缓冲器0标准标识符低位
 226   1      //  MCP2515_WriteByte(TXB0EID8,0x00);//发送缓冲器0标准标识符高位
 227   1      //  MCP2515_WriteByte(TXB0EID0,0x00);//发送缓冲器0标准标识符低位
 228   1      //
 229   1      //
 230   1      //  MCP2515_WriteByte(RXB0SIDH,0x00);//清空接收缓冲器0的标准标识符高位
 231   1      //  MCP2515_WriteByte(RXB0SIDL,0x00);//清空接收缓冲器0的标准标识符低位
 232   1      //
 233   1      //  MCP2515_WriteByte(RXB0CTRL,0x62);//仅仅接收标准标识符的有效信息
 234   1      //  MCP2515_WriteByte(RXB0DLC,DLC_8);//设置接收数据的长度为8个字节
 235   1      //  
 236   1      //  MCP2515_WriteByte(RXF0SIDH,0xFF);//配置验收滤波寄存器n标准标识符高位
 237   1      //
C51 COMPILER V9.60.0.0   MCP2515                                                           09/18/2021 02:15:25 PAGE 5   

 238   1      //  MCP2515_WriteByte(RXM0SIDH,0xFF);//配置验收屏蔽寄存器n标准标识符高位
 239   1      //  MCP2515_WriteByte(RXM1EID0,0xE0);//配置验收屏蔽寄存器n标准标识符低位
 240   1      //    
 241   1        MCP2515_WriteByte(CANINTF,0x00);//清空CAN中断标志寄存器的所有位(必须由MCU清空)
 242   1        MCP2515_WriteByte(CANINTE,0x03);//配置CAN中断使能寄存器的接收缓冲器0满中断使能,其它位禁止中断
 243   1        
 244   1      //  MCP2515_WriteByte(CANCTRL,REQOP_LOOPBACK|CLKOUT_ENABLED);//|OSM_ENABLED将MCP2515设置为正常模式,退出配置
             -模式
 245   1      //
 246   1      //  temp=MCP2515_ReadByte(CANSTAT);//读取CAN状态寄存器的值
 247   1      //  if(OPMODE_LOOPBACK!=(temp&&0xE0))//判断MCP2515是否已经进入正常模式
 248   1      //  {
 249   1      //      MCP2515_WriteByte(CANCTRL,REQOP_LOOPBACK|CLKOUT_ENABLED);//|OSM_ENABLED再次将MCP2515设置为正常模式,
             -退出配置模式
 250   1      //  }
 251   1      
 252   1          MCP2515_WriteByte(CANCTRL,REQOP_LOOPBACK|CLKOUT_ENABLED);//将MCP2515设置为环回模式,退出配置模式
 253   1      
 254   1          temp=MCP2515_ReadByte(CANSTAT);//读取CAN状态寄存器的值
 255   1          if(OPMODE_NORMAL!=(temp&&0xE0))//判断MCP2515是否已经进入环回模式
 256   1          {
 257   2          MCP2515_WriteByte(CANCTRL,REQOP_LOOPBACK|CLKOUT_ENABLED);//再次将MCP2515设置为环回模式,退出配置模式
 258   2          }
 259   1      
 260   1      }
 261          
 262          /*******************************************************************************
 263          * 函数名  : CAN_Send_Buffer
 264          * 描述    : CAN发送指定长度的数据
 265          * 输入    : *CAN_TX_Buf(待发送数据缓冲区指针),len(待发送数据长度)
 266          * 输出    : 无
 267          * 返回值  : 无
 268          * 说明    :
 269          * 改进点   ：在报文发送之前， MCU 应对CANINTE.TXInE 位进行初始化，以便在报文发送时使能或禁止中断的产生
 270           *          在写入发送缓冲器之前，必须将TXBnCTRL.TXREQ 位清零（表明发送缓冲器无等待发送的报文）。
 271          *******************************************************************************/
 272          void CAN_Send_buffer(uint32 ID,uint8 EXIDE,uint8 DLC,uint8 *Send_data)
 273          {
 274   1        uint8 *TXB_send;
 275   1          uint8 i;
 276   1        //寄存器状态获取TXB0是否忙碌，=1为忙碌，=0为空闲
 277   1        if ((MCP2515_ReadByte(TXB0CTRL)&0x04)==0) 
 278   1          TXB_send=&TXB0_Address;
 279   1        else if ((MCP2515_ReadByte(TXB1CTRL)&0x04)==0)
 280   1          TXB_send=&TXB1_Address;
 281   1        else if ((MCP2515_ReadByte(TXB2CTRL)&0x04)==0)
 282   1          TXB_send=&TXB2_Address;
 283   1        else      //寄存器全部忙碌
 284   1          TXB_send=&TXB0_Address;
 285   1      
 286   1        //设置DLC
 287   1        MCP2515_WriteByte(TXB_send[5],DLC);
 288   1      
 289   1        //EXIDE=1、ID>0x7FF发送拓展帧
 290   1        if (ID<=0x7FF)
 291   1        {
 292   2          if (EXIDE)
 293   2          {
 294   3            MCP2515_WriteByte(TXB_send[1],0x0);                 //SIDH
 295   3            MCP2515_WriteByte(TXB_send[2],0x8);                 //SIDL
 296   3            MCP2515_WriteByte(TXB_send[3],ID>>8&0xFF);              //EID8
 297   3            MCP2515_WriteByte(TXB_send[4],ID&0xFF);               //EID0
C51 COMPILER V9.60.0.0   MCP2515                                                           09/18/2021 02:15:25 PAGE 6   

 298   3          }                                   
 299   2          else
 300   2          { 
 301   3            MCP2515_WriteByte(TXB_send[1],ID>>3);               //SIDH
 302   3            MCP2515_WriteByte(TXB_send[2],(ID&0x07)<<5);            //SIDL
 303   3            MCP2515_WriteByte(TXB_send[3],0);                 //EID8
 304   3            MCP2515_WriteByte(TXB_send[4],0);                 //EID0
 305   3          }
 306   2        }
 307   1        else
 308   1        { 
 309   2          MCP2515_WriteByte(TXB_send[1],ID>>21);                  //SIDH
 310   2          MCP2515_WriteByte(TXB_send[2],(ID>>18&0x07)<<5|(ID>>16&0x03)|0x08);   //SIDL
 311   2          MCP2515_WriteByte(TXB_send[3],ID>>8&0xFF);                //EID8
 312   2          MCP2515_WriteByte(TXB_send[4],ID&0xFF);                 //EID0
 313   2        }
 314   1        
 315   1        for(i=0;(i<=DLC&&i<=8);i++)
 316   1        {
 317   2          MCP2515_WriteByte(TXB_send[6]+i,Send_data[i]);              //D0_8将待发送的数据写入发送缓冲寄存器
 318   2        }
 319   1      
 320   1        MCP2515_CS=0;
 321   1        MCP2515_WriteByte(TXB_send[0],0x08);                    //CTRL 开始发送
 322   1        MCP2515_CS=1;
 323   1        
 324   1        //发送形式设置：单次发送，远程帧，拓展帧，调试状态，回应。
 325   1      }
 326          
 327          /*******************************************************************************
 328          * 函数名  : CAN_Receive_Buffer
 329          * 描述    : CAN接收一帧数据
 330          * 输入    : RX_Address(需要读取的RXB0CTRL、RXB1CTRL地址),*CAN_TX_Buf(待接收数据缓冲区指针)
 331          * 输出    : 无
 332          * 返回值  : len(接收到数据的长度,0~8字节)
 333          * 说明    : 无
 334          *******************************************************************************/
 335          void CAN_Receive_Buffer(uint8 RXB_CTRL_Address,uint8 *CAN_RX_Buf)
 336          { 
 337   1        uint8 j;
 338   1        for(j=0;j<14;j++)
 339   1        {
 340   2          CAN_RX_Buf[j]=MCP2515_ReadByte(RXB_CTRL_Address+j);//把CAN接收到的数据放入指定缓冲区
 341   2          //CAN_RX_Buf[j]=RXB_CTRL_Address+j;
 342   2        }
 343   1        if (RXB_CTRL_Address==RXB0CTRL)
 344   1          {
 345   2          MCP2515_WriteByte(CANINTF,0);//清除中断标志位(中断标志寄存器必须由MCU清零)
 346   2          }
 347   1        else if (RXB_CTRL_Address==RXB1CTRL)
 348   1          {
 349   2          MCP2515_WriteByte(CANINTF,0);//清除中断标志位(中断标志寄存器必须由MCU清零)  
 350   2          }
 351   1      }
 352          
 353          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1441    ----
   CONSTANT SIZE    =     74    ----
   XDATA SIZE       =   ----    ----
C51 COMPILER V9.60.0.0   MCP2515                                                           09/18/2021 02:15:25 PAGE 7   

   PDATA SIZE       =   ----      23
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
